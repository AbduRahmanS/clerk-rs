/*
 * Clerk Backend API
 *
 * The Clerk REST Backend API, meant to be accessed by backend servers. Please see https://clerk.com/docs for more information.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@clerk.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateSamlConnectionRequest {
    /// The name to use as a label for this SAML Connection
    #[serde(rename = "name")]
    pub name: String,
    /// The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.
    #[serde(rename = "domain")]
    pub domain: String,
    /// The Entity ID as provided by the IdP
    #[serde(rename = "idp_entity_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub idp_entity_id: Option<Option<String>>,
    /// The Single-Sign On URL as provided by the IdP
    #[serde(rename = "idp_sso_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub idp_sso_url: Option<Option<String>>,
    /// The X.509 certificate as provided by the IdP
    #[serde(rename = "idp_certificate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub idp_certificate: Option<Option<String>>,
}

impl CreateSamlConnectionRequest {
    pub fn new(name: String, domain: String) -> CreateSamlConnectionRequest {
        CreateSamlConnectionRequest {
            name,
            domain,
            idp_entity_id: None,
            idp_sso_url: None,
            idp_certificate: None,
        }
    }
}


